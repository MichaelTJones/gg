\# gg manpage
.do xflag 3
.minss 9
.letadj 95 98 18 105 102
.padj
.ft R
.fp 1 R MinionPro-Regular otf
.fp 2 C MetaOT-Book otf
.fzoom 2 0.88
\# nroff -man gg.1
\# groff -t -e -mandoc -Tps gg.1 > gg.ps
\# troff -t -mandoc gg.1 | dpost > gg.ps
\# heirloom troff
\# tbl -g gg.1 | troff -t -mandoc | dpost > gg.ps
\# tbl -g gg.1 | troff -t -mandoc | dpost | ps2pdf -dCompatibilityLevel=1.3 - - > gg.pdf
.TH GG 1
.SH NAME
gg \- grep Go-language source code
.SH SYNOPSIS
gg [\fIoptions\fR] \fIacdiknoprstvg\fR \fIregexp\fR [\fIfile ...\fR]
.SH DESCRIPTION
gg is classic grep (g/RE/p) with Go token flags to limit the search to
package names, numbers, identifiers, comments, keywords, and more.
The token flags are "acdiknoprstvg" in any order or combination:
.PP
.RS
.TS
c l.
a	search in All of the following
c	search in Comments (//... or /*...*/)
d	search in Defined non-types (iota, nil, new, true, ...)
i	search in Identifiers ([alphabetic][alphabetic | numeric]*)
k	search in Keywords (if, for, func, go, ...)
n	search in Numbers (regex "255" matches 255, 0.255, 1e255)
o	search in Operators (\|,\|+\|-\|*\|/\|[\|]\|{\|}\|(\|)\|>>\|)
p	search in Package names
r	search in Rune literals ('a', '\\U00101234')
s	search in Strings (quoted or raw)
t	search in Types (bool, int, float64, map, ...)
v	search in Values (number 255 == 0b11111111, 0377, 0o377, 255, 0xff)
g	search as grep, perform line-by-line matches in each file
.TE
.RE
.PP
gg combines lexical analysis and Go-native pattern matching to extend
.BR grep (1)
for Go developers.
The search is restricted, seeking matches only in chosen token classes.
A search in number literals finds equal \fIvalues\fR, "v 255" matches the number 255
in source code as 0b1111_1111, 0377, 0o377, 255, and 0xff.
Go's linear-time regular expression engine is Unicode-aware and supports
many Perl extensions: numbers in identifiers are found with
"\f2gg i [0-9]\f1"
or
"\f2gg i [\\d]\f1",
comments with math symbols by
"\f2gg c \\p{Sm}\f1",
and Greek in strings via
"\f2gg s \\p{Greek}\f1"
each with appropriate shell escaping.
.PP
gg searches files named on the command line or in a file of filenames provided by
the "-list" argument.
If neither of these is present, gg reads filenames from the standard input, which is useful
in shell pipelines such as
"\f2find . -name '*.go' | gg k fallthrough\f1"
.PP
Files are Go source code files or directories.
Source files include typical ".go"
files; compressed ".go" files named ".go.bz2", ".go.gz", or ".go.zst" for Bzip2, Gzip,
and ZStandard compression formats; archives of any such files in the formats "a.cpio",
"a.tar", or "a.zip"; or, finally, compressed archives as in "a.cpio.bz2" and "a.tar.gz".
If a named file is a directory then Go source files in that directory are scanned
without visiting subdirectories.
With the "-r" flag enabled, named directories are processed recursively, scanning
each Go source file or archive in that directory's hierarchy.
.SH OPTIONS
.TP
.BR \-cpu =\fIn\fR
Set the number of CPUs to use. Negative n means "all but n."
Default is all.
.TP
.BR \-go =\fIbool\fR
Limit search to ".go" files.
Default is true.
.TP
.BR \-h =\fIbool\fR
Display file names ("headers") on matches.
Default is false for single-file searches and true otherwise.
.TP
.BR \-list =\fIfile\fR
Search files listed one per line in the named file.
.TP
.BR \-log =\fIfile\fR
Write a log of execution details to a named file.
The special file names "[stdout]" and "[stderr]" refer to the stdout and stderr streams.
(Last line of log details efficiency.)
.TP
.BR \-n =\fIbool\fR
Display line numbers following each match. Numbers count from one per file.
Default is false.
.TP
.BR \-output =\fIfile\fR
gg output is normally to stdout but may be directed to a named file.
The special names "[stdout]" and "[stderr]" refer to the stdout and stderr streams.
.TP
.BR \-r =\fIbool\fR
Search directories recursively.
Default is false.
.TP
.BR \-visible =\fIbool\fR
Restrict search to visible files, those with names that do not start with "." (in the shell tradition).
Default is true.
.TP
.BR \fIacdiknoprstvCDIKNOPRSTVg\fR
The Go token class flags have an upper case negative form to disable the indicated class.
Used with "a" for "all", "aCS" means "search All tokens except Comments and Strings."
Flag "g" means bypass Go lexical analysis and search files as the
.BR grep (1)
command, matching whole lines.
.SH EXAMPLES
To search for comments containing "case" (ignoring switch statements) in every
".go" file in the current working directory, use the command:
.PP
.nf
.RS
\f2gg c case .\f1
.RE
.fi
.PP
To find number literals containing the digits 42 (or any regexp) in ".go" files located anywhere in the current
directory's hierarchy, use the command:
.PP
.nf
.RS
\f2gg -r n 42 .\f1
.RE
.fi
.PP
Find numbers with values equal to 255 in any Go form (0b1111_1111, 0377,
0o377, 255, 0x00ff) in ".go" files in the gzipped
.BR tar (1)
archive omega with the command:
.PP
.nf
.RS
\f2gg v 255 omega.tar.gz\f1
.RE
.fi
.SH AUTHOR
Michael T. Jones (https://github.com/MichaelTJones)
.SH SEE ALSO
.nf
https://golang.org/pkg/regexp/syntax/
https://en.wikipedia.org/wiki/Unicode_character_property
Further advanced features and options are described in main.go
.fi
